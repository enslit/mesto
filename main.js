(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const t=function(){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._selector=n,this._callbackClickImage=r.handleClickImage,this._callbackDeleteCard=r.handleClickDelete,this._callbackClickLike=r.handleClickLike,this._id=e._id,this._name=e.name,this._link=e.link,this._likes=e.likes,this._isLiked=this._checkIsLiked(r.userId,e),this._canDelete=this._checkCanDelete(r.userId,e),this._initElements()}var n,r;return n=t,(r=[{key:"_initElements",value:function(){this._cardElement=this._getTemplate(),this._title=this._cardElement.querySelector(".card__title"),this._deleteButton=this._cardElement.querySelector(".btn_type_delete"),this._likeCount=this._cardElement.querySelector(".card__like-cnt"),this._likeButton=this._cardElement.querySelector(".btn_type_like"),this._image=this._cardElement.querySelector(".card__image")}},{key:"_getTemplate",value:function(){return document.querySelector(this._selector).content.cloneNode(!0)}},{key:"_checkCanDelete",value:function(e,t){return!!t.hasOwnProperty("owner")&&e===t.owner._id}},{key:"_checkIsLiked",value:function(e,t){return!!t.hasOwnProperty("likes")&&t.likes.some((function(t){return t._id===e}))}},{key:"renderCountLikes",value:function(e){this._likeCount.textContent=e.length||""}},{key:"toggleLike",value:function(){this._isLiked=!this._isLiked,this._likeButton.classList.toggle("btn_type_like-active")}},{key:"_handleLikeCard",value:function(){var e={id:this._id,isLiked:this._isLiked};this._callbackClickLike(e,this)}},{key:"_handleDeleteCard",value:function(e){var t=e.target.closest(".cards__list-item");this._callbackDeleteCard(this._id,t)}},{key:"_handlePreviewPicture",value:function(){var e={link:this._link,title:this._name};this._callbackClickImage(e)}},{key:"_setListeners",value:function(){this._likeButton.addEventListener("click",this._handleLikeCard.bind(this)),this._image.addEventListener("click",this._handlePreviewPicture.bind(this)),this._canDelete&&this._deleteButton.addEventListener("click",this._handleDeleteCard.bind(this))}},{key:"getCard",value:function(){return this._canDelete&&this._deleteButton.classList.remove("card__delete_hidden"),this._title.textContent=this._name,this._image.src=this._link,this._image.alt=this._name,this._isLiked&&this._likeButton.classList.add("btn_type_like-active"),this.renderCountLikes(this._likes),this._setListeners(this._cardElement),this._cardElement}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=n,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inactiveButtonClass=t.inactiveButtonClass,this._submitButton=n.querySelector(t.submitButtonSelector),this._inputs=Array.from(n.querySelectorAll(t.inputSelector))}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e){var t=this._getElementError(e.id);e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass),t.textContent=e.validationMessage}},{key:"_hideInputError",value:function(e){var t=this._getElementError(e.id);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_getElementError",value:function(e){return this._formElement.querySelector(".".concat(e,"-error"))}},{key:"_checkValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_hasInvalidInput",value:function(){return this._inputs.some((function(e){return!e.validity.valid}))}},{key:"toggleButtonState",value:function(){this._hasInvalidInput(this._inputs)?(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}},{key:"_setListeners",value:function(){var e=this;this._inputs.forEach((function(t){t.addEventListener("input",(function(){e._checkValidity(t),e.toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this.toggleButtonState(),this._setListeners()}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._KEY_ESC="Escape"}var t,n;return t=e,(n=[{key:"_handleClickPopup",value:function(e){var t=e.target;(t.classList.contains("btn_type_close")||t.classList.contains("popup"))&&this.close()}},{key:"_handlePressEsc",value:function(e){e.key===this._KEY_ESC&&this.close()}},{key:"setListenersPopup",value:function(){this._handleClickPopup=this._handleClickPopup.bind(this),this._handlePressEsc=this._handlePressEsc.bind(this),this._popup.addEventListener("click",this._handleClickPopup,!0),document.addEventListener("keydown",this._handlePressEsc)}},{key:"removeListenersPopup",value:function(){this._popup.removeEventListener("click",this._handleClickPopup),document.removeEventListener("keydown",this._handlePressEsc)}},{key:"open",value:function(){this.setListenersPopup(),this._popup.classList.add("popup_opened")}},{key:"close",value:function(){this.removeListenersPopup(),this._popup.classList.remove("popup_opened")}},{key:"getElement",value:function(){return this._popup}}])&&o(t.prototype,n),e}();function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function c(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e,t,n){return(f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=h(r);if(o){var n=h(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return c(this,e)});function a(e,t){var n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._form=f((n=l(r),h(a.prototype)),"getElement",n).call(n).querySelector(".form"),r._submitButton=r._form.querySelector(".form__save"),r._cb=t,r}return t=a,(n=[{key:"_getInputValues",value:function(){var e={};return Array.from(this._form.querySelectorAll(".form__input")).forEach((function(t){e[t.name]=t.value})),e}},{key:"setLoading",value:function(e){this._submitButton.textContent=e?"Сохранение...":"Сохранить"}},{key:"setInitValues",value:function(e){for(var t in e)if(e.hasOwnProperty(t)){var n=this._form.querySelector(".form__input_type_".concat(t));n&&(n.value=e[t])}}},{key:"_handleSubmitForm",value:function(e){e.preventDefault(),this.setLoading(!0),this._cb(this._getInputValues())}},{key:"setListenersPopup",value:function(){f(h(a.prototype),"setListenersPopup",this).call(this),this._handleSubmitForm=this._handleSubmitForm.bind(this),this._form.addEventListener("submit",this._handleSubmitForm)}},{key:"removeListenersPopup",value:function(){f(h(a.prototype),"removeListenersPopup",this).call(this),this._form.removeEventListener("submit",this._handleSubmitForm)}},{key:"close",value:function(){f(h(a.prototype),"close",this).call(this),this._form.reset()}}])&&u(t.prototype,n),a}(i);function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._containerElement=document.querySelector(n),this._items=r,this._renderer=o}var t,n;return t=e,(n=[{key:"setItems",value:function(e){this._items=e}},{key:"addItem",value:function(e){this._containerElement.prepend(e)}},{key:"renderElements",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}}])&&_(t.prototype,n),e}();function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?k(e):t}function k(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(e,t,n){return(g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var w=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function a(e){var t,n,r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,e))._imgPreview=g((t=k(r),E(a.prototype)),"getElement",t).call(t).querySelector(".popup__image"),r._signPreview=g((n=k(r),E(a.prototype)),"getElement",n).call(n).querySelector(".popup__sign"),r}return t=a,(n=[{key:"open",value:function(e){var t=e.link,n=e.title;this._imgPreview.src=t,this._imgPreview.alt=n,this._signPreview.textContent=n,g(E(a.prototype),"open",this).call(this)}}])&&v(t.prototype,n),a}(i);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var S=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t.name),this._about=document.querySelector(t.about),this._avatarUrl=document.querySelector(t.avatar),this._id=null}var t,n;return t=e,(n=[{key:"getId",value:function(){return this._id}},{key:"getUserInfo",value:function(){return{name:this._name.textContent,about:this._about.textContent,avatar:this._avatarUrl.src,_id:this._id}}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._about.textContent=e.about,this._avatarUrl.src=e.avatar,this._id=e._id}}])&&C(t.prototype,n),e}();function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=new(function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=t.baseUrl,this._headers=t.headers}var t,n;return t=e,(n=[{key:"_fetch",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GET",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r="".concat(this._baseUrl,"/").concat(e),o={method:t,headers:this._headers};return n&&(o.body=JSON.stringify(n)),fetch(r,o).then((function(e){return e.ok?e.json():Promise.reject({statusCode:e.status,message:e.statusText})}))}},{key:"getMe",value:function(){return this._fetch("users/me")}},{key:"getInitialCards",value:function(){return this._fetch("cards")}},{key:"updateProfile",value:function(e){return this._fetch("users/me","PATCH",e)}},{key:"postCard",value:function(e){return this._fetch("cards","POST",e)}},{key:"delete",value:function(e){return this._fetch("cards/".concat(e),"DELETE")}},{key:"like",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return this._fetch("cards/likes/".concat(e),t?"PUT":"DELETE")}},{key:"updateAvatar",value:function(e){return this._fetch("users/me/avatar","PATCH",e)}}])&&L(t.prototype,n),e}())({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-21",headers:{authorization:"52186c90-0ae5-45bb-99b5-e4acaa2b939f","Content-Type":"application/json"}}),O={inputSelector:".form__input",submitButtonSelector:".form__save",inactiveButtonClass:"form__save_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error_visible"},I=new S({name:".profile__name",about:".profile__about",avatar:".profile__avatar"}),j=new w(".popup_type_image"),B=document.querySelector(".btn_type_edit-profile"),q=document.querySelector(".btn_type_add-card"),R=document.querySelector(".profile__avatar-wrapper");function T(e){return(T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t){return(D=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e,t){return!t||"object"!==T(t)&&"function"!=typeof t?A(e):t}function A(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function F(e,t,n){return(F="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=V(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function V(e){return(V=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&D(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=V(r);if(o){var n=V(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return U(this,e)});function a(e,t){var n,r,o,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(u=i.call(this,e))._callback=t,u._form=F((n=A(u),V(a.prototype)),"getElement",n).call(n).querySelector(".form"),u._idElement=F((r=A(u),V(a.prototype)),"getElement",r).call(r).querySelector(".form__input_type_id"),u._submitButton=F((o=A(u),V(a.prototype)),"getElement",o).call(o).querySelector(".form__save"),u}return t=a,(n=[{key:"_handleSubmitForm",value:function(e){e.preventDefault();var t=this._form.elements.id.value;this._callback(t,this._listItem)}},{key:"setLoading",value:function(e){this._submitButton.textContent=e?"Удаление...":"Да"}},{key:"setListenersPopup",value:function(){F(V(a.prototype),"setListenersPopup",this).call(this),this._handleSubmitForm=this._handleSubmitForm.bind(this),this._form.addEventListener("submit",this._handleSubmitForm)}},{key:"open",value:function(e,t){this._idElement.value=e,this._listItem=t,F(V(a.prototype),"open",this).call(this)}},{key:"close",value:function(){this._form.reset(),this._listItem=null,F(V(a.prototype),"close",this).call(this)}}])&&x(t.prototype,n),a}(i);function H(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var K=function(e){return j.open(e)},N=function(e,t){return X.open(e,t)},Y=function(e,t){var n=e.id,r=e.isLiked;P.like(n,!r).then((function(e){var n=e.likes;t.toggleLike(),t.renderCountLikes(n)})).catch((function(e){return console.error(e)}))},z=function(e){return new t(e,"#cardTemplate",{userId:I.getId(),handleClickImage:K,handleClickDelete:N,handleClickLike:Y}).getCard()},G=function(e,t){var n=e.getElement().querySelector(".form"),o=new r(t,n);return o.enableValidation(),o},J=new y({renderer:function(e){var t=z(e);J.addItem(t)}},".cards__list"),$=new p(".popup_type_add-card",(function(e){P.postCard(e).then((function(e){J.addItem(z(e)),$.close()})).catch((function(e){console.error(e.message||e.toString())})).finally((function(){$.setLoading(!1)}))})),Q=new p(".popup_type_edit-profile",(function(e){P.updateProfile(e).then((function(e){I.setUserInfo(e),Q.close()})).catch((function(e){console.error(e.message||e.toString())})).finally((function(){Q.setLoading(!1)}))})),W=new p(".popup_type_update-profile",(function(e){P.updateAvatar(e).then((function(e){I.setUserInfo(e),W.close()})).catch((function(e){return console.error(e)})).finally((function(){return W.setLoading(!1)}))})),X=new M(".popup_type_delete",(function(e,t){X.setLoading(!0),P.delete(e).then((function(){t.remove(),X.close()})).catch((function(e){return console.error(e)})).finally((function(){return X.setLoading(!1)}))})),Z=G($,O),ee=G(Q,O),te=G(W,O);Promise.all([P.getMe(),P.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return n}}(t,n)||function(e,t){if(e){if("string"==typeof e)return H(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?H(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];I.setUserInfo(o),J.setItems(i.reverse()),J.renderElements()})).catch((function(e){console.error(e.message)})),B.addEventListener("click",(function(){Q.setInitValues(I.getUserInfo()),ee.toggleButtonState(),Q.open()})),q.addEventListener("click",(function(){Z.toggleButtonState(),$.open()})),R.addEventListener("click",(function(){te.toggleButtonState(),W.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,